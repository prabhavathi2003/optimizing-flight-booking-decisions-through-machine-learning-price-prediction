# -*- coding: utf-8 -*-
"""flight.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UJj4djvJYC2DH3gfC4PDfKpFXM1yi8Rh
"""

# Importing required lib

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import warnings
warnings.filterwarnings('ignore')

"""# New Section"""

plt.style.available

# checking for available styles

plt.style.use('fivethirtyeight')

# Reading csv Data

df = pd.read_csv('/content/Data_Train(2).csv')
df.head()

# checking data type
df.info()

"""
# Type of analysis
1) Univariate analysis
2) Bivariate analysis
3) Multivariate analysis
4) Descriptive analysis / statistics
"""





# Univariate analysis - Extracting info from a single column

#checking data distribution

sns.distplot(df['Price'])

# Creating dummy dataframe for categorical value

df_cat = df.select_dtypes(include='object')
df_cat.head()

# Encoding 

# Encoding with replace method

df['Airline'] = df['Airline'].replace({'yes' :2, 'no' : 0})
df.head()

df['Total_Stops'].unique

df['Source'] = df['Source'].replace({'Banglore':0,'kolkata':3,'Delhi':2})
df['Destination'] = df['Destination'].replace({'New Delhi':0,'Banglore':1,'Cochin':2})
df.head()

df.info()

df.isnull().sum()

df.describe()

from sklearn.preprocessing import LabelEncoder

le = LabelEncoder()

#Encoding

#Encoding with replace method

df['Airline'] = df['Airline'].replace({})

df.info()

# visualizing counts in each variable

for i,j in enumerate(df_cat):
  plt.subplot(1,4,i+1)
  sns.countplot(df[j])

for i,j in enumerate(df_cat):
  print(j)
  print(i)



# Bivariate analysis - Extracting info from double column 

# Visualizing the relation between Price,Airline,Route,source

plt.figure(figsize=(18,4))
plt.subplot(131)
sns.countplot(x='Airline',data=df)
plt.subplot(132)
sns.countplot(x='Route',data=df)

df['Price'].min()

# creating new column

df['Price-'] = ['1759-3000' if x<=3000 else "3000-5000" if x>3000 and x<=5000 else "5000+" for x in df['Price']]

df.head()

# Finding relation between price_ & Route

sns.heatmap(pd.crosstab(df['Price_'],df['Route']))

# Multivariate analysis - Extract info from more than 2 columns

sns.swarmplot(df['Price'],df['Duration'],hue=df['Destination'])

# Finding corr

sns.heatmap(df.corr())

# Descriptive analysis - descriptive stat

df.describe(include='all')

# Data Preprocessing

# Finding the shape of data

df.shape

# Finding null values 

df.isnull().any()

# Finding dtype

df.info()

# Finding outliers

sns.boxplot(df['Price'])

# Finding the count of outliers

# IQR = q3-q1....., ub = q3+(1.5*IQR), lb = q1-(1.5*IQR)
q1 = np.quantile(df['Price'],0.25)
q3 = np.quantile(df['Price'],0.75)

print('Q1 = {}'.format(q1))
print('Q3 ={}'.format(q3))

IQR = q3-q1

print('IQS value is {}'.format(IQR))

upperBound = q3+(1.5*IQR)
lowerBound = q1-(1.5*IQR)

print('The upper bound value is {} & the lower value is {}'.format(upperBound,lowerBound))

print('skwad data :',len(df['Price']>upperBound))

len(df[df['Price']>upperBound])

# Handling outliers

from scipy import stats

plt.figure(figsize=(15,4))
plt.subplot(131)
sns.distplot(df['Price'])
plt.subplot(132)
stats.probplot(np.log(df['Price']),plot=plt)
plt.subplot(133)
sns.distplot(np.log(df['Price']))

stats.probplot(np.log(df['Price']),plot=plt)

# Transforming normal values to log values

df['Price']=np.log(df['Price'])

df.head()

# Encoding

# Encoding with list comp

df['Source'] = [0 if x=='LOW' else 1 if x=='NORMAL' else 2 for x in df['Source']]

# encoding with replace method

df['Total_Stops'] = df['Total_Stops'].replace({'yes' :0, 'no' :1})

# Encoding with replace mmethod

df['Additional_Info'] = df['Additional_Info'].replace({'yes' :0, 'no' :1})

df.head()

# spliting dep & Indep variables

x = df.drop('Duration',axis=1)
x.head()

y = df['Duration']
y

# simple linear reg

# Import necessary lib

import numpy as np
import pandas as pd

# Reading the data

df = pd.read_csv('/content/Data_Train (1) (1).csv')
df.head()

# Descriptive stat

df.describe()

plt.scatter(df['Destination'],df['Price'])

# Independent varilable

x = df.iloc[:,0:1]
x.head()

# Dependent varilable

y = df.iloc[:,2:]
y.head()

# split training & testing

from sklearn.model_selection import train_test_split

xtrain, xtest, ytrain, test = train_test_split(x,y,test_size=0.3,random_state=11)

print(xtrain.shape)
print(xtest.shape)

lr = LinearRegression()

df.isnull().sum()

# checking unique values

df['Price'].unique()

le = LabelEncoder

# splitting data into traning and testing set

from sklearn.model_selection import train_test_split

xtrain,xtest,ytrain,test = train_test_split(x,y,test_size=0.2,random_state=10)

print(xtrain.shape)
print(xtest.shape)

# Importing req lib

import numpy as np # Numerical python
import pandas as pd # for manipulation
import matplotlib.pyplot as plt # for visualization
from sklearn.preprocessing import PolynomialFeatures # polynomial regression
from sklearn.linear_model import LinearRegression # for building the model
from sklearn.metrics import r2_score # checking accuracy

# Reading csv Data

df = pd.read_csv('/content/Data_Train (1) (1).csv')
df.head()

df['Date_of_Journey'].unique()

# Finding co-relation

df.corr()

# scatter plot

plt.scatter(df['Duration'],df['Airline'])





df = pd.read_csv('/content/Data_Train(2).csv')
df.head()

df['Source'] = df['Source'].replace({'Banglore':0,'kolkata':3,'Delhi':2})
df.head()

# Descriptive stat

df.describe()

df.shape

